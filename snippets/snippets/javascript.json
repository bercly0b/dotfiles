{
  "describe": {
    "prefix": "desc",
    "body": "describe('${1:description}', () => {\n\t${0}\n})"
  },
  "it asynchronous": {
    "prefix": "it",
    "body": "it('${1:description}', async () => {\n\t${0}\n})"
  },
  "const module = require('module')": {
    "prefix": "req",
    "body": "const ${1:module} = require('${1:module}')"
  },
  "querySelector": {
    "prefix": "qs",
    "body": "${1:document}.querySelector('${2:selector}')"
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": "Array.from(${1:document}.querySelectorAll('${2:selector}'))"
  },
  "map": {
    "prefix": "map",
    "body": "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"
  },
  "reduce": {
    "prefix": "reduce",
    "body": "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"
  },
  "filter": {
    "prefix": "filter",
    "body": "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"
  },
  "find": {
    "prefix": "find",
    "body": "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"
  },
  "const statement from destructuring": {
    "prefix": "cd",
    "body": "const { ${2:prop} } = ${1:value}"
  },
  "import module": {
    "prefix": "imp",
    "body": "import ${2:*} from '${1:module}'"
  },
  "import module destructured": {
    "prefix": "impd",
    "body": "import {$2} from '${1:module}'"
  },
  "try/catch": {
    "prefix": "try",
    "body": "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"
  },
  "anonymous function": {
    "prefix": "fun",
    "body": "function (${1:arguments}) {${0}}"
  },
  "named function": {
    "prefix": "funn",
    "body": "function ${1:name} (${2:arguments}) {\n\t${0}\n}"
  },
  "immediately-invoked function expression": {
    "prefix": "iife",
    "body": ";(function (${1:arguments}) {\n\t${0}\n})(${2})"
  },
  "arrow function with body": {
    "prefix": "arrow",
    "body": "(${1:arguments}) => {\n\t${0}\n}"
  },
  "arrow function with return": {
    "prefix": "arrowr",
    "body": "(${1:arguments}) => {\n\treturn ${0}\n}"
  },
  "console.log": {
    "prefix": "col",
    "body": "console.log(${0})"
  },
  "console.log a variable": {
    "prefix": "coln",
    "body": "console.log('${0}:', ${0})"
  }
}
