{
    "jsx element": {
        "body": "<${1:elementName}>\n\t$0\n</${1}>",
        "description": "an element",
        "prefix": "tag"
    },
    "jsx element self closed": {
        "body": "<${1:elementName} />",
        "description": "an element self closed",
        "prefix": "tags"
    },
    "jsx elements map": {
        "body": "{${1:array}.map((item) => <${2:elementName} key={item.id}>\n\t$0\n</${2}>)}",
        "description": "an element self closed",
        "prefix": "tagm"
    },
    "reactFunctionComponent": {
        "body": "import React from 'react'\n\nexport const ${TM_FILENAME_BASE} = (props : {}) => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t)\n}",
        "description": "Creates a React functional component without PropTypes",
        "prefix": "rfc"
    },
    "useCallback": {
        "body": [
            "const ${1:memoizedCallback} = useCallback(",
            "\t() => {",
            "\t\t${2:doSomething}(${3:a}, ${4:b})",
            "\t},",
            "\t[${5:a}, ${6:b}],",
            ")$0"
        ],
        "description": "React useCallback() hook",
        "prefix": "usec"
    },
    "useContext": {
        "body": [
            "const $1 = useContext($2)$0"
        ],
        "description": "React useContext() hook",
        "prefix": "useco"
    },
    "useEffect": {
        "body": [
            "useEffect(() => {",
            "\t$1",
            "}, [${3:dependencies}])$0"
        ],
        "description": "React useEffect() hook",
        "prefix": "usee"
    },
    "useMemo": {
        "body": [
            "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
        ],
        "description": "React useMemo() hook",
        "prefix": "usem"
    },
    "useRef": {
        "body": [
            "const ${1:elName}El = useRef(null)$0"
        ],
        "description": "React useContext() hook",
        "prefix": "user"
    },
    "useState": {
        "body": "const [${1:val}, set${2:setterName}] = useState(${3:defVal})",
        "description": "use state hook",
        "prefix": "uses"
    }
}
