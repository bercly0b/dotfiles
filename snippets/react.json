{
    "useCallback": {
        "body": [
            "const ${1:memoizedCallback} = useCallback(",
            "\t() => {",
            "\t\t${2:doSomething}(${3:a}, ${4:b})",
            "\t},",
            "\t[${5:a}, ${6:b}],",
            ")$0"
        ],
        "description": "React useCallback() hook",
        "prefix": "usec"
    },
    "useEffect": {
        "body": [
            "useEffect(() => {",
            "\t$1",
            "}, [${3:dependencies}])$0"
        ],
        "description": "React useEffect() hook",
        "prefix": "usee"
    },
    "useMemo": {
        "body": [
            "const ${1:memoizedValue} = useMemo(() => ${2:computeExpensiveValue}(${3:a}, ${4:b}), [${5:a}, ${6:b}])$0"
        ],
        "description": "React useMemo() hook",
        "prefix": "usem"
    },
    "useRef": {
        "body": [
            "const ${1:elName}El = useRef(null)$0"
        ],
        "description": "React useContext() hook",
        "prefix": "user"
    },
    "useState": {
        "body": "const [${1:val}, set${2:setterName}] = useState(${3:defVal})",
        "description": "use state hook",
        "prefix": "uses"
    }
}
